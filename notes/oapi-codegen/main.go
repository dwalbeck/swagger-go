// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"log"
	"net"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	middleware "github.com/oapi-codegen/nethttp-middleware"
	openapi_types "github.com/oapi-codegen/runtime/types"
)


func main() {
	port := "8000"

	loader := openapi3.NewLoader()

	swaggerSpec, err := loader.LoadFromFile("./swagger3.yaml")
	if err != nil {
		panic(err)
	}

	// This is how you set up a basic chi router
	r := chi.NewRouter()

	// Use our validation middleware to check all requests against the
	// OpenAPI schema.
	r.Use(middleware.OapiRequestValidator(swaggerSpec))

	// We now register our petStore above as the handler for the interface
	HandlerFromMux(&ServerInterfaceWrapper{}, r)

	s := &http.Server{
		Handler: r,
		Addr:    net.JoinHostPort("0.0.0.0", port),
	}

	// And we serve HTTP until the world ends.
	log.Println("starting server")
	log.Fatal(s.ListenAndServe())
}


// Defines values for GoResponseOutcome.
const (
	GoResponseOutcomeFailed  GoResponseOutcome = "failed"
	GoResponseOutcomeSuccess GoResponseOutcome = "success"
)

// Defines values for PaymentCCType.
const (
	Amex       PaymentCCType = "amex"
	Discover   PaymentCCType = "discover"
	Mastercard PaymentCCType = "mastercard"
	Visa       PaymentCCType = "visa"
)

// Address defines model for Address.
type Address struct {
	AddressCreated *time.Time `json:"Address_created,omitempty"`
	City           *string    `json:"City,omitempty"`
	Country        string     `json:"Country"`
	FirstName      *string    `json:"First_name,omitempty"`
	LastName       *string    `json:"Last_name,omitempty"`
	Postcode       string     `json:"Postcode"`
	State          string     `json:"State"`
	StreetAddr     string     `json:"Street_addr"`
	StreetAddr2    *string    `json:"Street_addr_2,omitempty"`
}

// Contact defines model for Contact.
type Contact struct {
	ContactAddressId *Address            `json:"Contact_address_id,omitempty"`
	ContactEmail     openapi_types.Email `json:"Contact_email"`
	ContactPhone     string              `json:"Contact_phone"`
}

// GoResponse defines model for GoResponse.
type GoResponse struct {
	// Message Short explanation of either the successful or failed processing of order record
	Message *string `json:"message,omitempty"`

	// NonFatal List of failures for non-required data blocks
	NonFatal *[]struct {
		DbTablePath *string `json:"db_table_path,omitempty"`
		Error       *string `json:"error,omitempty"`
	} `json:"non-fatal,omitempty"`

	// Outcome Indicator on the outcome of the submitted order record
	Outcome *GoResponseOutcome `json:"outcome,omitempty"`
}

// GoResponseOutcome Indicator on the outcome of the submitted order record
type GoResponseOutcome string

// Order defines model for Order.
type Order struct {
	ClientOrderId       *int              `json:"Client_order_id,omitempty"`
	CompanyId           int               `json:"Company_id"`
	CrmAccountId        *int              `json:"Crm_account_id,omitempty"`
	IngestionProviderId int               `json:"Ingestion_provider_id"`
	OrderBilling        *OrderBilling     `json:"Order_billing,omitempty"`
	OrderCreated        *time.Time        `json:"Order_created,omitempty"`
	OrderDetail         *OrderDetail      `json:"Order_detail,omitempty"`
	OrderNote           *OrderNote        `json:"Order_note,omitempty"`
	OrderProduct        *OrderProduct     `json:"Order_product,omitempty"`
	OrderShipping       *OrderShipping    `json:"Order_shipping,omitempty"`
	OrderStatus         *int              `json:"Order_status,omitempty"`
	OrderTransaction    *OrderTransaction `json:"Order_transaction,omitempty"`
	OrderUuid           *string           `json:"Order_uuid"`
}

// OrderBilling defines model for Order_billing.
type OrderBilling struct {
	BillingAddressId    *Address            `json:"Billing_address_id,omitempty"`
	BillingCycle        *int                `json:"Billing_cycle,omitempty"`
	Currency            *string             `json:"Currency,omitempty"`
	Mid                 *string             `json:"Mid,omitempty"`
	OrderTotal          *float64            `json:"Order_total,omitempty"`
	RecurringDate       *openapi_types.Date `json:"Recurring_date,omitempty"`
	RetryDate           *openapi_types.Date `json:"Retry_date,omitempty"`
	SalesTax            *float64            `json:"Sales_tax,omitempty"`
	SalesTaxAmount      *float64            `json:"Sales_tax_amount,omitempty"`
	TotalAmountRefunded *float64            `json:"Total_amount_refunded,omitempty"`
	UsdAmount           *float64            `json:"Usd_amount,omitempty"`
}

// OrderDetail defines model for Order_detail.
type OrderDetail struct {
	Affiliate           *int                `json:"Affiliate,omitempty"`
	AncestorId          *int                `json:"Ancestor_id,omitempty"`
	CampaignId          *int                `json:"Campaign_id,omitempty"`
	ChildId             *int                `json:"Child_id"`
	ClickId             *int                `json:"Click_id,omitempty"`
	CrmBlacklisted      *bool               `json:"Crm_blacklisted,omitempty"`
	CrmRefunded         *bool               `json:"Crm_refunded,omitempty"`
	CrmStoppedRecurring *bool               `json:"Crm_stopped_recurring,omitempty"`
	CustomerId          *int                `json:"Customer_id,omitempty"`
	DetailCreated       *time.Time          `json:"Detail_created,omitempty"`
	DetailUpdated       *time.Time          `json:"Detail_updated,omitempty"`
	IpAddress           *string             `json:"Ip_address,omitempty"`
	OnHoldBy            *string             `json:"On_hold_by,omitempty"`
	OnHoldDate          *openapi_types.Date `json:"On_hold_date,omitempty"`
	OrderConfirmed      *bool               `json:"Order_confirmed,omitempty"`
	OrderConfirmedDate  *openapi_types.Date `json:"Order_confirmed_date,omitempty"`
	OrderContactId      *Contact            `json:"Order_contact_id,omitempty"`
	OrderDate           *openapi_types.Date `json:"Order_date,omitempty"`
	ParentId            *int                `json:"Parent_id,omitempty"`
	Resolved            *bool               `json:"Resolved,omitempty"`
	SubAffiliate        *string             `json:"Sub_affiliate,omitempty"`
}

// OrderNote defines model for Order_note.
type OrderNote = []struct {
	NoteCreated *time.Time `json:"Note_created,omitempty"`
	NoteMessage *string    `json:"Note_message,omitempty"`
}

// OrderProduct defines model for Order_product.
type OrderProduct = []struct {
	OrderProductCreated   *time.Time `json:"Order_product_created,omitempty"`
	ProductId             *int       `json:"Product_id,omitempty"`
	ProductQuantity       *int       `json:"Product_quantity,omitempty"`
	UpsellProductId       *int       `json:"Upsell_product_id,omitempty"`
	UpsellProductQuantity *int       `json:"Upsell_product_quantity,omitempty"`
}

// OrderShipping defines model for Order_shipping.
type OrderShipping struct {
	ShippingAddressId  *Address `json:"Shipping_address_id,omitempty"`
	ShippingDate       *string  `json:"Shipping_date,omitempty"`
	ShippingMethodName *string  `json:"Shipping_method_name,omitempty"`
	TrackingNumber     *string  `json:"Tracking_number,omitempty"`
}

// OrderTransaction defines model for Order_transaction.
type OrderTransaction struct {
	AuthId          *string    `json:"Auth_id,omitempty"`
	AvsResponse     *string    `json:"Avs_response,omitempty"`
	CvvResponse     *string    `json:"Cvv_response,omitempty"`
	DeclineReason   *string    `json:"Decline_reason,omitempty"`
	GatewayId       *int       `json:"Gateway_id,omitempty"`
	IsChargeback    *bool      `json:"Is_chargeback,omitempty"`
	IsFraud         *bool      `json:"Is_fraud,omitempty"`
	IsRecurring     *bool      `json:"Is_recurring,omitempty"`
	IsRma           *bool      `json:"Is_rma,omitempty"`
	PanLocked       *bool      `json:"Pan_locked,omitempty"`
	PaymentId       *Payment   `json:"Payment_id,omitempty"`
	PreserveGateway *bool      `json:"Preserve_gateway,omitempty"`
	ProcessorId     *string    `json:"Processor_id,omitempty"`
	RmaNumber       *string    `json:"Rma_number,omitempty"`
	RmaReason       *string    `json:"Rma_reason,omitempty"`
	TransactionDate *time.Time `json:"Transaction_date,omitempty"`
	TransactionId   *int       `json:"Transaction_id,omitempty"`
}

// Payment defines model for Payment.
type Payment struct {
	CCType       *PaymentCCType `json:"CC_type,omitempty"`
	CardBin      *string        `json:"Card_bin,omitempty"`
	CardBinShort *string        `json:"Card_bin_short,omitempty"`
	CardSource   *string        `json:"Card_source,omitempty"`
	CcExp        *string        `json:"Cc_exp,omitempty"`
	CcNumber     *string        `json:"Cc_number,omitempty"`
	CheckAccount *string        `json:"Check_account,omitempty"`
	CheckRouting *string        `json:"Check_routing,omitempty"`
	CheckSsn     *string        `json:"Check_ssn,omitempty"`
	PrepaidMatch *bool          `json:"Prepaid_match,omitempty"`
}

// PaymentCCType defines model for Payment.CCType.
type PaymentCCType string

// Default defines model for Default.
type Default = GoResponse

// Success defines model for Success.
type Success = GoResponse

// ProcessUploadJSONRequestBody defines body for ProcessUpload for application/json ContentType.
type ProcessUploadJSONRequestBody = Order

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Main end point for processing records
	// (POST /)
	ProcessUpload(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Main end point for processing records
// (POST /)
func (_ Unimplemented) ProcessUpload(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ProcessUpload operation middleware
func (siw *ServerInterfaceWrapper) ProcessUpload(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProcessUpload(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/", wrapper.ProcessUpload)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
