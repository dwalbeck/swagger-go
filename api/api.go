// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Defines values for FooFooColor.
const (
	Green  FooFooColor = "green"
	Orange FooFooColor = "orange"
	Purple FooFooColor = "purple"
)

// Error defines model for Error.
type Error struct {
	// Code Error code
	Code int32 `json:"code"`

	// Message Error message
	Message string `json:"message"`
}

// Foo defines model for Foo.
type Foo struct {
	FooColor *FooFooColor `json:"foo_color,omitempty"`

	// FooQuantity Total number of Foos
	FooQuantity *int `json:"foo_quantity"`

	// FooUsState The US state from which the Foo originated
	FooUsState string `json:"foo_us_state"`

	// PriKey Primary identifier
	PriKey int32 `json:"pri_key"`
}

// FooFooColor defines model for Foo.FooColor.
type FooFooColor string

// FooList defines model for FooList.
type FooList = []Foo

// FooListParams defines parameters for FooList.
type FooListParams struct {
	// Search A search string to match against
	Search *string `form:"search,omitempty" json:"search,omitempty"`

	// Limit Number of records to return
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// FooNewJSONRequestBody defines body for FooNew for application/json ContentType.
type FooNewJSONRequestBody = Foo

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List of Foos
	// (GET /foo)
	FooList(w http.ResponseWriter, r *http.Request, params FooListParams)
	// Fictitious service end-point
	// (POST /foo)
	FooNew(w http.ResponseWriter, r *http.Request)
	// Show a Foo
	// (GET /foo/{foo_id})
	FooGet(w http.ResponseWriter, r *http.Request, fooId int32)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List of Foos
// (GET /foo)
func (_ Unimplemented) FooList(w http.ResponseWriter, r *http.Request, params FooListParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Fictitious service end-point
// (POST /foo)
func (_ Unimplemented) FooNew(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Show a Foo
// (GET /foo/{foo_id})
func (_ Unimplemented) FooGet(w http.ResponseWriter, r *http.Request, fooId int32) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// FooList operation middleware
func (siw *ServerInterfaceWrapper) FooList(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params FooListParams

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", r.URL.Query(), &params.Search)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "search", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FooList(w, r, params)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FooNew operation middleware
func (siw *ServerInterfaceWrapper) FooNew(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FooNew(w, r)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FooGet operation middleware
func (siw *ServerInterfaceWrapper) FooGet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "foo_id" -------------
	var fooId int32

	err = runtime.BindStyledParameterWithOptions("simple", "foo_id", chi.URLParam(r, "foo_id"), &fooId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "foo_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FooGet(w, r, fooId)
	}))

	for i := len(siw.HandlerMiddlewares) - 1; i >= 0; i-- {
		handler = siw.HandlerMiddlewares[i](handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/foo", wrapper.FooList)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/foo", wrapper.FooNew)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/foo/{foo_id}", wrapper.FooGet)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7RW0W/bthP+Vwj+fo9a7Cbb0OotQZstQFAETdeXIgho6iSxFXnM8RTPMPy/D0fZqh0r",
	"SLdub5ZI3X333Xffea0t+ogBAiddrjVBihgS5Id3REjyw2JgCCw/TYyds4YdhtmXhEHeJduCN/Lr/wS1",
	"LvX/Zt+izobTNBuibTabQleQLLkoQXQ5pFG7zKpG8oYVBlUb1/UEelPoS8Rrl/hvgXEMPr2E6hJR4vMq",
	"gi61ITKrKYznqnOJFdbqEjHJF7e9tZBy/MOrt2xCZahSDQQgZ1Uabo4Vagm/zX9AcySMQOwG9i1WcBx9",
	"ICufFXqgSpfaBT471WMZLjA0QALTQ0qmeTbQ7nj8NDG50GSIBA+9I6h0+VlvE+6u3433cfEFLG9bdFxE",
	"jXhvsRvqq6A2fSd4Y0+xk4AQei/xxxcNAQRdaCQTDhLtgBU55kNvAjteHdf1Edl0KvR+ATT2q9De/Om8",
	"5HrzptDeheHhVaFD33Vm0YEumXqYolDy9ek+seEJHj+2oP64VflU1YReLVtnW8UtSG6F5BoXDEM1oLiG",
	"0HCry9MMY+/pqM5I7v4rTJR4Q84bWilXQWBXO6Dv0cKTju6iP6nvuLPyoQs1HuP4BLRSC5OcVZEQa6Hb",
	"YrAQWZ3fXAkGx8KsviBcBnVhGvUWPOpCPwKlIcj85NXJXMrFCMFEp0t9djI/OdOFjobbrKJZPWirAT5G",
	"8QGYHDyCMuOMmq7LfVc19kF4F0lmm7iqdDmaiWQg44GBki4/r7XpOlx+gAT0KCQNgnhqBAkM2VYNfVKM",
	"yhu2rTKNcSEHdXLvoQcScoPxuav5I13s2dOeFn79eWL+tnDe+cirT6brYRrQ+1HpBBapSgKJgHsKz2Dp",
	"nHf8FMowD2ene8Pxy4SG7orDFXE6nz/nsOO92Y7v7KpbC3jpm922KHTqvahdl/r6iQVHTBN6uI0Y2ATA",
	"PimLftEnOVCG1dJQVCkCTEriPSz1MCKQ+AKr1b+2+fKOOd4pv+NykM9X0a5c2p9Q6fXmn7C9W0w/yval",
	"s+zYCY0yEM6CglD9FNEFzldlKmdrcQ9Xbb5nPFMEK3ZVbYs9asFvMDGUh+Gu3sofhNFdlyYMzpqFLobx",
	"TecDsiNS94X/smk+I/j/UhfnKrnQdLnAH+7ibYvLrbpyquxtk8x2aE2nqA9BfK0Cj0oMzQQre7mnTpe6",
	"ZY7lbJavtpi4XEck3szWC5PgxnC7EW835GSjZr52B4f7//HVML/Eh+9fz1/PBefd5q8AAAD//4Sv3pWZ",
	"CgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
